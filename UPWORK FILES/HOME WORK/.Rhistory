main="Normal Distribution", axes=FALSE)
hx=dnorm(carat,0.8,0.4)
plot(carat, hx, type="n", xlab="IQ Values", ylab="",
main="Normal Distribution", axes=FALSE)
hx=dnorm(carat,0.8,0.4)
plot(carat, hx, type="n", xlab="IQ Values", ylab="",
main="Normal Distribution", axes=FALSE)
hx=dnorm(0,1)
hx
hx=dnorm(0,1,53000)
hx=dnorm(0,1,53000)
hx
hx=dnorm(0,4567,53000)
hx=dnorm(0,4567,53000)
hx
# Histogram plot
hist(diamonds$carat,main = "Histogram for carat size")
mean(carat)
max(carat)
min(carat)
library("ggpubr")
ggdensity(carat,
main = "Density plot of tooth length",
xlab = "Tooth length")
library("ggpubr")
install.packages("ggpubr")
library("ggpubr")
ggdensity(carat,
main = "Density plot of tooth length",
xlab = "Tooth length")
d <- density(diamonds$carat)
plot(d, type="n", main="Density plot for carat size")
polygon(d, col="red", border="gray")
# Boxplot
boxplot(diamonds$carat,main="Boxplot for carat size")
# Question 7
qplot(color,price,data=diamonds, geom = "boxplot")
mean(carat)
median(carat)
library(dplyr)
diamonds %>%
group_by(color) %>%
summarise_at(vars(carat), funs(median(., na.rm=TRUE)))
library(dplyr)
diamonds %>%
group_by(color) %>%
summarise_at(vars(carat), funs(mean(., na.rm=TRUE)))
# Question 4
barchart(table(diamonds$cut),main="Number of diamonds per cut")
require(lattice)
barchart(table(diamonds$cut),main="Number of diamonds per cut")
library(dplyr)
# a.	Read the data into a data frame in R
pdcalls=read.csv("jerseycitypdservicecalls2017csv.csv",header = T)
attach(pdcalls)
setwd("C:/Users/Administrator/Desktop/UPWORK/PROJECTS/Machine learning in R tutoring/HOME WORK")
library(dplyr)
# a.	Read the data into a data frame in R
pdcalls=read.csv("jerseycitypdservicecalls2017csv.csv",header = T)
attach(pdcalls)
# b.	Find the number of variables and number of rows of data
#The first number is for rows and the second for variables
dim(pdcalls)
# c.	Inspect the data by printing out the first six rows.
head(pdcalls,6)
# d.	How many rows are there with missing values?
sum(!complete.cases(pdcalls))
#   e.	Remove the rows with missing data
edit1 <- pdcalls[complete.cases(pdcalls), ]
dim(edit1)
# f.	Check to see if there are any duplicate rows.  If there are duplicate rows then remove them.
which(duplicated(pdcalls))
edit2=edit1[!duplicated(edit1), ]
dim(edit2)
# g.	Sort the data by call type
head(edit2)
edit3=edit2[order(call.type),]
head(edit3)
# h.	Create a new data frame called calls911 by filtering the original
# dataset for the 911 calls.  Print out the first six rows and check if the
# filtering worked.  How many 911 calls were there?
calls911=filter(edit3,call.type=='911')
head(calls911)
str(edit3)
class(edit3$time.received)
edit3$time_received <- strptime(edit3$time.received,
format = "%m-%d-%Y %H:%M:%OS",
tz = "EST")
class(edit3$time.received)
class(edit3$time.received)
edit3$time.received <- strptime(edit3$time.received,
format = "%m-%d-%Y %H:%M:%OS",
tz = "EST")
class(edit3$time.received)
edit3$time.received=as.numeric(time_received)
edit3$time.received=as.numeric(time.received)
class(edit3$time.received)
edit3$time.dispatched<- strptime(time.dispatched,
format = "%m-%d-%Y %H:%M:%OS",
tz = "EST")
edit3$time_dispatched=as.numeric(time_dispatched)
edit3$time.dispatched=as.numeric(time_dispatched)
edit4=mutate(edit3, dispatchduration = edit3$time.dispatched-edit3$time.received)
# g.	Sort the data by call type
head(edit2)
edit3=edit2[order(call.type),]
head(edit3)
# h.	Create a new data frame called calls911 by filtering the original
# dataset for the 911 calls.  Print out the first six rows and check if the
# filtering worked.  How many 911 calls were there?
calls911=filter(edit3,call.type=='911')
head(calls911)
attach(edit3)
class(edit3$time.received)
edit3$time.received <- strptime(edit3$time.received,
format = "%m-%d-%Y %H:%M:%OS",
tz = "EST")
class(edit3$time.received)
class(edit3$time.dispatched)
edit3$time.dispatched<- strptime(time.dispatched,
format = "%m-%d-%Y %H:%M:%OS",
tz = "EST")
class(edit3$time.dispatched)
edit4=mutate(edit3, dispatchduration = edit3$time.dispatched-edit3$time.received)
edit3$time.received <- as.POSIXct(strptime(edit3$time.received,
format = "%m-%d-%Y %H:%M:%OS",
tz = "EST"))
class(edit3$time.received)
edit3$time.received <- as.POSIXct(strptime(edit3$time.received,
format = "%m-%d-%Y %H:%M:%S",
tz = "EST"))
class(edit3$time.received)
class(edit3$time.received)
class(edit3$time.dispatched)
edit3$time.dispatched<- as.POSIXct(strptime(time.dispatched,
format = "%m-%d-%Y %H:%M:%OS",
tz = "EST"))
class(edit3$time.dispatched)
edit4=mutate(edit3, dispatchduration = edit3$time.dispatched-edit3$time.received)
head(edit4)
class(edit3$time.received)
edit3$time.dispatched<- as.numeric(as.POSIXct(strptime(time.dispatched,
format = "%m-%d-%Y %H:%M:%OS",
tz = "EST")))
class(edit3$time.received)
class(edit3$time.dispatched)
edit3$time.received <- as.numeric(as.POSIXct(strptime(edit3$time.received,
format = "%m-%d-%Y %H:%M:%S",
tz = "EST")))
class(edit3$time.received)
edit4=mutate(edit3, dispatchduration = edit3$time.dispatched-edit3$time.received)
head(edit4)
View(edit4)
dplyr::filter(pdcalls, grepl('GUNSHOTS', call.code.description))
gunshotdata=dplyr::filter(pdcalls, grepl('GUNSHOTS', call.code.description))
View(gunshotdata)
head(gunshotdata)
head(edit2[order(call.type),])
# g.	Sort the data by call type
head(edit2)
head(edit2[order(call.type),])
attach(edit2)
edit2$time.received<-as.POSIXct(time.received,format="%m-%d-%Y %H:%M:%S")
View(edit2)
class(time.received)
class(time.received)
edit2$time.received<-as.POSIXct(strptime(time.received,
format="%m-%d-%Y %H:%M:%S",tz='EST'))
class(time.received)
edit2$time.received<-as.POSIXct(strptime(edit2$time.received,
format="%m-%d-%Y %H:%M:%S",tz='EST'))
class(time.received)
View(edit2)
as.Date(edit2$time.received)
# f.	Check to see if there are any duplicate rows.  If there are duplicate
# rows then remove them.
which(duplicated(pdcalls))
edit2=edit1[!duplicated(edit1), ]
dim(edit2)
# g.	Sort the data by call type
head(edit2)
head(edit2[order(call.type),])
# h.	Create a new data frame called calls911 by filtering the original
# dataset for the 911 calls.  Print out the first six rows and check if the
# filtering worked.  How many 911 calls were there?
calls911=filter(edit3,call.type=='911')
attach(edit2)
edit2$time.received<-as.Date.POSIXct(strptime(edit2$time.received,
format="%m-%d-%Y %H:%M:%S",tz='EST'))
edit2$time.received<-strptime(edit2$time.received,
format="%m-%d-%Y %H:%M:%S",tz='EST')
class(time.received)
View(edit2)
attach(pdcalls)
pdcalls$time.received<-strptime(pdcalls$time.received,
format="%m-%d-%Y %H:%M:%S",tz='EST')
class(time.received)
library(dplyr)
# a.	Read the data into a data frame in R
pdcalls=read.csv("jerseycitypdservicecalls2017csv.csv",header = T)
attach(pdcalls)
# b.	Find the number of variables and number of rows of data
#The first number is for rows and the second for variables
dim(pdcalls)
# c.	Inspect the data by printing out the first six rows.
head(pdcalls,6)
# d.	How many rows are there with missing values?
sum(!complete.cases(pdcalls))
#   e.	Remove the rows with missing data
pdcalls <- pdcalls[complete.cases(pdcalls), ]
dim(pdcalls)
# f.	Check to see if there are any duplicate rows.  If there are duplicate
# rows then remove them.
which(duplicated(pdcalls))
pdcalls=pdcalls[!duplicated(edit1), ]
dim(pdcalls)
# g.	Sort the data by call type
head(pdcalls)
head(pdcalls[order(call.type),])
# h.	Create a new data frame called calls911 by filtering the original
# dataset for the 911 calls.  Print out the first six rows and check if the
# filtering worked.  How many 911 calls were there?
calls911=filter(pdcalls,call.type=='911')
head(calls911)
# i.	Create a new variable (column) called dispatchduration by subtracting
# time.received from time.dispatched.  Hint:  Use the mutate command in
# dplyr. You also need to convert the format of time.received and
# time.dispatched using the strptime() command and then subtract.
attach(pdcalls)
View(pdcalls)
class(time.received)
pdcalls$time.received<-strptime(pdcalls$time.received,
format="%m-%d-%Y %H:%M:%S",tz='EST')
class(time.received)
pdcalls$time.received<-as.POSIXct(strptime(pdcalls$time.received,
format="%m-%d-%Y %H:%M:%S",tz='EST'))
class(time.received)
as.POSIXct(pdcalls$time.received,
format='%m/%d/%Y %H:%M')
difftime(time.received, time.dispatched, units = "secs")
attach(pdcalls)
pdcalls$time_R<-strptime(time.received,  # Apply strptime with timezone
format = "%Y-%m-%d %H:%M:%OS",
tz = "EST")
library(dplyr)
# a.	Read the data into a data frame in R
pdcalls=read.csv("jerseycitypdservicecalls2017csv.csv",header = T)
attach(pdcalls)
# b.	Find the number of variables and number of rows of data
#The first number is for rows and the second for variables
dim(pdcalls)
# c.	Inspect the data by printing out the first six rows.
head(pdcalls,6)
# d.	How many rows are there with missing values?
sum(!complete.cases(pdcalls))
#   e.	Remove the rows with missing data
pdcalls <- pdcalls[complete.cases(pdcalls), ]
dim(pdcalls)
# f.	Check to see if there are any duplicate rows.  If there are duplicate
# rows then remove them.
which(duplicated(pdcalls))
pdcalls_1=pdcalls[!duplicated(edit1), ]
dim(pdcalls_1)
# g.	Sort the data by call type
head(pdcalls_1)
head(pdcalls_1[order(call.type),])
# h.	Create a new data frame called calls911 by filtering the original
# dataset for the 911 calls.  Print out the first six rows and check if the
# filtering worked.  How many 911 calls were there?
calls911=filter(pdcalls,call.type=='911')
head(calls911)
# i.	Create a new variable (column) called dispatchduration by subtracting
# time.received from time.dispatched.  Hint:  Use the mutate command in
# dplyr. You also need to convert the format of time.received and
# time.dispatched using the strptime() command and then subtract.
attach(pdcalls)
pdcalls$time_R<-strptime(time.received,  # Apply strptime with timezone
format = "%Y-%m-%d %H:%M:%OS",
tz = "EST")
testPD1=pdcalls
library(dplyr)
# a.	Read the data into a data frame in R
pdcalls=read.csv("jerseycitypdservicecalls2017csv.csv",header = T)
attach(pdcalls)
# b.	Find the number of variables and number of rows of data
#The first number is for rows and the second for variables
dim(pdcalls)
# c.	Inspect the data by printing out the first six rows.
head(pdcalls,6)
# d.	How many rows are there with missing values?
sum(!complete.cases(pdcalls))
#   e.	Remove the rows with missing data
pdcalls <- pdcalls[complete.cases(pdcalls), ]
dim(pdcalls)
# f.	Check to see if there are any duplicate rows.  If there are duplicate
# rows then remove them.
which(duplicated(pdcalls))
pdcalls=pdcalls[!duplicated(edit1), ]
dim(pdcalls)
# g.	Sort the data by call type
head(pdcalls)
head(pdcalls[order(call.type),])
# h.	Create a new data frame called calls911 by filtering the original
# dataset for the 911 calls.  Print out the first six rows and check if the
# filtering worked.  How many 911 calls were there?
calls911=filter(pdcalls,call.type=='911')
head(calls911)
# i.	Create a new variable (column) called dispatchduration by subtracting
# time.received from time.dispatched.  Hint:  Use the mutate command in
# dplyr. You also need to convert the format of time.received and
# time.dispatched using the strptime() command and then subtract.
testPD1=pdcalls
testPD1$time_R<-strptime(testPD1$time.received,  # Apply strptime with timezone
format = "%m-%d-%Y %H:%M:%OS",
tz = "EST")
View(testPD1)
library(dplyr)
testPD1$time_R<-strptime(testPD1$time.received,  # Apply strptime with timezone
format = "%m-%d-%Y %H:%M:%OS",
tz = "EST")
library(dplyr)
testPD1$time_R<-strptime(testPD1$time.received,  # Apply strptime with timezone
format = "%m/%d/%Y %H:%M:%OS",
tz = "EST")
View(testPD1[[19]][[63814]])
testPD1$time_D<-strptime(testPD1$time.dispatched,  # Apply strptime with timezone
format = "%m/%d/%Y %H:%M:%OS",
tz = "EST")
View(testPD1)
difftime(testPD1$time_D, testPD1$time_R, units = "secs")
library(dplyr)
pdcalls$time_R<-strptime(pdcalls$time.received,  # Apply strptime with timezone
format = "%m/%d/%Y %H:%M:%OS",
tz = "EST")
pdcalls$time_D<-strptime(pdcalls$time.dispatched,  # Apply strptime with timezone
format = "%m/%d/%Y %H:%M:%OS",
tz = "EST")
pdcalls=mutate(pdcalls,dispatchduration=pdcalls$time_D-pdcalls$time_R)
head(pdcalls)
View(pdcalls)
pdcalls$dispatchduration=difftime(testPD1$time_D, testPD1$time_R,
units = "secs")
head(pdcalls)
!complete.cases(pdcalls$dispatchduration)
sum(!complete.cases(pdcalls$dispatchduration))
mean(dispatchduration)
mean(pdcalls$dispatchduration)
#Negative values
pdcalls$dispatchduration <- pdcalls[pdcalls$dispatchduration > 0, ]
#Negative values
pdcalls$dispatchduration <- pdcalls[pdcalls$dispatchduration >= 0, ]
#Negative values
nrow(df[pdcalls$dispatchduration>0,])
#Negative values
nrow(pdcalls[pdcalls$dispatchduration>0,])
#Negative values
nrow(pdcalls[pdcalls$dispatchduration<0,])
# Zero values
nrow(pdcalls[pdcalls$dispatchduration=0,])
# Zero values
nrow(pdcalls[pdcalls$dispatchduration==0,])
# Remove negative and zero values
pdcalls[pdcalls$dispatchduration>0,]
# Remove negative and zero values
pdcalss_clean=pdcalls[pdcalls$dispatchduration>0,]
# Remove negative and zero values
pdcalss_clean=pdcalls[pdcalls$dispatchduration>0,]
dim(pdclass_clean)
dim(pdclass_clean)
head(pdcalss_clean)
dim(pdclass_clean)
head(pdcalss_clean)
View(pdcalss_clean)
dim(pdclass_clean)
# Remove negative and zero values
pdclass_clean=pdcalls[pdcalls$dispatchduration>0,]
dim(pdclass_clean)
head(pdclass_clean)
# l.	Find the average (mean) dispatch duration by call type
summaryBy(dispatchduration~call.type, data=pdclass_clean, FUN=mean)
library(doBy)
# l.	Find the average (mean) dispatch duration by call type
install.packages("doBy")
library(doBy)
summaryBy(dispatchduration~call.type, data=pdclass_clean, FUN=mean)
mean(pdcalls$dispatchduration)
mean(pdcalls_clean$dispatchduration)
mean(pdcalls_clean$dispatchduration)
# Remove negative and zero values
pdcalls_clean=pdcalls[pdcalls$dispatchduration>0,]
dim(pdcalls_clean)
head(pdcalls_clean)
mean(pdcalls_clean$dispatchduration)
summaryBy(dispatchduration~call.type, data=pdclass_clean, FUN=mean)
summaryBy(pdcalls_clean$dispatchduration~call.type, data=pdclass_clean, FUN=mean)
summaryBy(dispatchduration~call.type, data=pdclass_clean, FUN=mean)
mean(pdcalls_clean$dispatchduration)
View(calls911)
#Negative values
nrow(calls911)
dim(pdcalls)
pdcalls=read.csv("jerseycitypdservicecalls2017csv.csv",header = T)
attach(pdcalls)
head(pdcalls,6)
library(dplyr)
calls911=filter(pdcalls,call.type=='911')
head(calls911)
# Number of 911 calls
nrow(calls911)
library(doBy)
summaryBy(pddispatchduration~call.type, data=pdcalls_clean, FUN=mean)
library(doBy)
summaryBy(dispatchduration~call.type, data=pdcalls_clean, FUN=mean)
library(dplyr)
pdcalls$time_R<-strptime(pdcalls$time.received,  # Apply strptime with timezone
format = "%m/%d/%Y %H:%M:%OS",
tz = "EST")
pdcalls$time_D<-strptime(pdcalls$time.dispatched,  # Apply strptime with timezone
format = "%m/%d/%Y %H:%M:%OS",
tz = "EST")
pdcalls$dispatchduration=difftime(pdcalls$time_D, pdcalls$time_R,
units = "secs")
head(pdcalls)
#Missing values
sum(!complete.cases(pdcalls$dispatchduration))
#Negative values
nrow(pdcalls[pdcalls$dispatchduration<0,])
# Zero values
nrow(pdcalls[pdcalls$dispatchduration==0,])
# Remove negative and zero values
pdcalls_clean=pdcalls[pdcalls$dispatchduration>0,]
dim(pdcalls_clean)
head(pdcalls_clean)
mean(pdcalls_clean$dispatchduration)
library(doBy)
summaryBy(dispatchduration~call.type, data=pdcalls_clean, FUN=mean)
length(grep("GUNSHOTS", pdcalls$call.code.description))
gunshotdata=dplyr::filter(pdcalls, grepl('GUNSHOTS', call.code.description))
gunshotdata=dplyr::filter(pdcalls, grepl('GUNSHOTS', call.code.description))
head(gunshotdata)
library(dplyr)
View(pdclass_clean)
class(time_D)
class(pdcalls$time_D)
as.Date.POSIXct(pdcalls)
as.Date(pdcalls)
as.Date(pdcalls$time_D)
class(pdcalls$time_D)
pdcalls$time_D=as.POSIXct(pdcalls$time_D)
class(pdcalls$time_D)
class(pdclass$time_R)
class(pdcalls$time_R)
pdcalls$time_R=as.POSIXct(pdcalls$time_D)
class(pdcalls$time_R)
library(dplyr)
pdcalls$time_R<-strptime(pdcalls$time.received,  # Apply strptime with timezone
format = "%m/%d/%Y %H:%M:%OS",
tz = "EST")
pdcalls$time_R=as.POSIXct(pdcalls$time_D)
class(pdcalls$time_R)
pdcalls$time_D<-strptime(pdcalls$time.dispatched,  # Apply strptime with timezone
format = "%m/%d/%Y %H:%M:%OS",
tz = "EST")
pdcalls$time_D=as.POSIXct(pdcalls$time_D)
class(pdcalls$time_D)
pdcalls$dispatchduration=difftime(pdcalls$time_D, pdcalls$time_R,
units = "secs")
head(pdcalls)
library(dplyr)
gunshotdata=dplyr::filter(pdcalls, grepl('GUNSHOTS', call.code.description))
head(gunshotdata)
class(pdcalls$time_R)
library(dplyr)
pdcalls$time_R<-strptime(pdcalls$time.received,
format = "%m/%d/%Y %H:%M:%OS",tz = "EST")
pdcalls$time_D<-strptime(pdcalls$time.dispatched,
format = "%m/%d/%Y %H:%M:%OS", tz = "EST")
pdcalls$dispatchduration<-difftime(pdcalls$time_D, pdcalls$time_R,
units = "secs")
drop(pdcalls$time_D,)
library(dplyr)
pdcalls$time_R<-strptime(pdcalls$time.received,
format = "%m/%d/%Y %H:%M:%OS",tz = "EST")
pdcalls$time_D<-strptime(pdcalls$time.dispatched,
format = "%m/%d/%Y %H:%M:%OS", tz = "EST")
pdcalls$dispatchduration<-difftime(pdcalls$time_D, pdcalls$time_R,
units = "secs")
head(pdcalls)
library(dplyr)
pdcalls$time_R<-strptime(pdcalls$time.received,
format = "%m/%d/%Y %H:%M:%OS",tz = "EST")
pdcalls$time_D=as.POSIXct(pdcalls$time_D)
pdcalls$time_D<-strptime(pdcalls$time.dispatched,
format = "%m/%d/%Y %H:%M:%OS", tz = "EST")
pdcalls$time_R=as.POSIXct(pdcalls$time_D)
pdcalls$dispatchduration<-difftime(pdcalls$time_D, pdcalls$time_R,
units = "secs")
head(pdcalls)
class(pdcalls$time_D)
class(pdcalls$time_R)
pdcalls$time_D=as.POSIXct(pdcalls$time_D)
class(pdcalls$time_D)
pdcalls$time_R=as.POSIXct(pdcalls$time_D)
class(pdcalls$time_R)
library(dplyr)
pdcalls$time_R<-as.POSIXct(strptime(pdcalls$time.received,
format = "%m/%d/%Y %H:%M:%OS",tz = "EST"))
pdcalls$time_D<-as.POSIXct(strptime(pdcalls$time.dispatched,
format = "%m/%d/%Y %H:%M:%OS", tz = "EST"))
pdcalls$dispatchduration<-difftime(pdcalls$time_D, pdcalls$time_R,
units = "secs")
head(pdcalls)
