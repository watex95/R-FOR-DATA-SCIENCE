install.packages("rjson")
install.packages('xlsx')
# Load the package required to read JSON files.
library("rjson")
# Give the input file name to the function.
result <- fromJSON(file = "pro_leave1.json")
# Print the result.
print(result)
# # Convert JSON file to a data frame.
names=result$data$attributes$signatures_by_constituency
## Compute maximum length
max.length <- max(sapply(names, length))
## Add NA values to list elements
names1 <- lapply(names, function(v) { c(v, rep(NA, max.length-length(v)))})
## Rbind
my_data=do.call(rbind, names1)
library(xlsx)
install.packages('xlsx')
library(xlsx)
install.packages("rJava")
library(xlsx)
library(xlsxjars)
file="C:/Users/Administrator/Desktop/FREELANCER_COM_WORK/BREXIT analysis/cw1.xlsx"
write.xlsx(my_data,file,sheetName="sample1")
file="C:/Users/Administrator/Desktop/FREELANCER_COM_WORK/BREXIT analysis/proleave1.csv.csv"
write.csv(my_data,file)
file="C:/Users/Administrator/Desktop/FREELANCER_COM_WORK/BREXIT analysis/proleave1.txt"
write.table(my_data,file)
my_data
my_data=mydata[,2:3]
my_data=my_data[,2:3]
my_data=as.data.frame(my_data)
View(my_data)
my_data=my_data[,c(2,4)]
my_data=my_data[,c(2:4)]
my_data=my_data[,2:4]
# Load the package required to read JSON files.
library("rjson")
# Give the input file name to the function.
result <- fromJSON(file = "pro_leave1.json")
# Print the result.
print(result)
# # Convert JSON file to a data frame.
names=result$data$attributes$signatures_by_constituency
#do.call(rbind.data.frame, names)
## Compute maximum length
max.length <- max(sapply(names, length))
## Add NA values to list elements
names1 <- lapply(names, function(v) { c(v, rep(NA, max.length-length(v)))})
## Rbind
my_data=do.call(rbind, names1)
my_data=as.data.frame(my_data)
View(my_data)
file="C:/Users/Administrator/Desktop/FREELANCER_COM_WORK/BREXIT analysis/proleave1.txt"
write.table(my_data,file)
View(my_data)
my_data=my_data[-1,3]
my_data=my_data[,c(2,3)]
my_data=my_data[,-c(1,3)]
my_data=as.data.frame(my_data)
# Load the package required to read JSON files.
library("rjson")
# Give the input file name to the function.
result <- fromJSON(file = "pro_leave1.json")
# Print the result.
print(result)
# # Convert JSON file to a data frame.
names=result$data$attributes$signatures_by_constituency
#do.call(rbind.data.frame, names)
## Compute maximum length
max.length <- max(sapply(names, length))
## Add NA values to list elements
names1 <- lapply(names, function(v) { c(v, rep(NA, max.length-length(v)))})
## Rbind
my_data=do.call(rbind, names1)
my_data=as.data.frame(my_data)
View(my_data)
my_data=my_data[,c("ons_code","signature_count")]
View(my_data)
file="C:/Users/Administrator/Desktop/FREELANCER_COM_WORK/BREXIT analysis/proleave1.txt"
write.table(my_data,file)
write.table(my_data,file)
write.ta(my_data,file,fileEncoding="")
write.table(my_data,file,fileEncoding="")
file="C:/Users/Administrator/Desktop/FREELANCER_COM_WORK/BREXIT analysis/proleave1.csv"
write.csv(my_data,file)
write.csv(my_data,"C:/Users/Administrator/Desktop/FREELANCER_COM_WORK/BREXIT analysis/proleave1.csv")
my_data1=my_data[,c("ons_code","signature_count")]
write.csv(my_data1,"C:/Users/Administrator/Desktop/FREELANCER_COM_WORK/BREXIT analysis/proleave1.csv")
library(data.table)
library(data.table)
fwrite(x = my_data1,
file = "C:/Users/Administrator/Desktop/FREELANCER_COM_WORK/BREXIT analysis/proleave1.txt",
sep = ",",
col.names=T,
append=T)
# Load the package required to read JSON files.
library("rjson")
# Give the input file name to the function.
result <- fromJSON(file = "pro_leave2.json")
# Print the result.
print(result)
# # Convert JSON file to a data frame.
names=result$data$attributes$signatures_by_constituency
#do.call(rbind.data.frame, names)
## Compute maximum length
max.length <- max(sapply(names, length))
## Add NA values to list elements
names1 <- lapply(names, function(v) { c(v, rep(NA, max.length-length(v)))})
## Rbind
my_data=do.call(rbind, names1)
my_data=as.data.frame(my_data)
my_data=my_data[,c("ons_code","signature_count")]
library(data.table)
fwrite(x = my_data,
file = "C:/Users/Administrator/Desktop/FREELANCER_COM_WORK/BREXIT
analysis/proleave2.txt",
sep = ",",
col.names=T,
append=T)
View(my_data1)
fwrite(x = my_data,
file = "C:/Users/Administrator/Desktop/FREELANCER_COM_WORK/BREXIT
analysis/proleave2.txt",
sep = ",",
col.names=T,
append=T)
library(data.table)
fwrite(x = my_data,
file = "C:/Users/Administrator/Desktop/FREELANCER_COM_WORK/BREXIT analysis/proleave2.txt",
sep = ",",
col.names=T,
append=T)
#Initialize the text file path
path1="C:/Users/Administrator/Desktop/FREELANCER_COM_WORK/BREXIT analysis/proleave1.txt"
path2="C:/Users/Administrator/Desktop/FREELANCER_COM_WORK/BREXIT analysis/proleave2.txt"
path3="C:/Users/Administrator/Desktop/FREELANCER_COM_WORK/BREXIT analysis/proleave3.txt"
path4="C:/Users/Administrator/Desktop/FREELANCER_COM_WORK/BREXIT analysis/proremain1.txt"
path5="C:/Users/Administrator/Desktop/FREELANCER_COM_WORK/BREXIT analysis/proremain2.txt"
path6="C:/Users/Administrator/Desktop/FREELANCER_COM_WORK/BREXIT analysis/proremain3.txt"
library(data.table)
fwrite(x = my_data,
file = path3,
sep = ",",
col.names=T,
append=T)
#Initialize the files
file1="pro_leave1.json"
file2="pro_leave2.json"
file3="pro_leave3.json"
file4="pro_remain.json"
file5="pro_remain2.json"
file6="pro_remain3.json"
# Give the input file name to the function.
result <- fromJSON(file = file3)
# Print the result.
print(result)
# # Convert JSON file to a data frame.
names=result$data$attributes$signatures_by_constituency
#do.call(rbind.data.frame, names)
## Compute maximum length
max.length <- max(sapply(names, length))
## Add NA values to list elements
names1 <- lapply(names, function(v) { c(v, rep(NA, max.length-length(v)))})
## Rbind
my_data=do.call(rbind, names1)
my_data=as.data.frame(my_data)
my_data=my_data[,c("ons_code","signature_count")]
#Write the data into text files
#Initialize the text file path
path1="C:/Users/Administrator/Desktop/FREELANCER_COM_WORK/BREXIT analysis/proleave1.txt"
path2="C:/Users/Administrator/Desktop/FREELANCER_COM_WORK/BREXIT analysis/proleave2.txt"
path3="C:/Users/Administrator/Desktop/FREELANCER_COM_WORK/BREXIT analysis/proleave3.txt"
path4="C:/Users/Administrator/Desktop/FREELANCER_COM_WORK/BREXIT analysis/proremain1.txt"
path5="C:/Users/Administrator/Desktop/FREELANCER_COM_WORK/BREXIT analysis/proremain2.txt"
path6="C:/Users/Administrator/Desktop/FREELANCER_COM_WORK/BREXIT analysis/proremain3.txt"
library(data.table)
fwrite(x = my_data,
file = path3,
sep = ",",
col.names=T,
append=T)
# Give the input file name to the function.
result <- fromJSON(file = file4)
# Print the result.
print(result)
# # Convert JSON file to a data frame.
names=result$data$attributes$signatures_by_constituency
#do.call(rbind.data.frame, names)
## Compute maximum length
max.length <- max(sapply(names, length))
## Add NA values to list elements
names1 <- lapply(names, function(v) { c(v, rep(NA, max.length-length(v)))})
## Rbind
my_data=do.call(rbind, names1)
my_data=as.data.frame(my_data)
my_data=my_data[,c("ons_code","signature_count")]
#Write the data into text files
#Initialize the text file path
path1="C:/Users/Administrator/Desktop/FREELANCER_COM_WORK/BREXIT analysis/proleave1.txt"
path2="C:/Users/Administrator/Desktop/FREELANCER_COM_WORK/BREXIT analysis/proleave2.txt"
path3="C:/Users/Administrator/Desktop/FREELANCER_COM_WORK/BREXIT analysis/proleave3.txt"
path4="C:/Users/Administrator/Desktop/FREELANCER_COM_WORK/BREXIT analysis/proremain1.txt"
path5="C:/Users/Administrator/Desktop/FREELANCER_COM_WORK/BREXIT analysis/proremain2.txt"
path6="C:/Users/Administrator/Desktop/FREELANCER_COM_WORK/BREXIT analysis/proremain3.txt"
library(data.table)
fwrite(x = my_data,
file = path4,
sep = ",",
col.names=T,
append=T)
# Give the input file name to the function.
result <- fromJSON(file = file5)
# Print the result.
print(result)
# # Convert JSON file to a data frame.
names=result$data$attributes$signatures_by_constituency
#do.call(rbind.data.frame, names)
## Compute maximum length
max.length <- max(sapply(names, length))
## Add NA values to list elements
names1 <- lapply(names, function(v) { c(v, rep(NA, max.length-length(v)))})
## Rbind
my_data=do.call(rbind, names1)
my_data=as.data.frame(my_data)
my_data=my_data[,c("ons_code","signature_count")]
#Write the data into text files
#Initialize the text file path
path1="C:/Users/Administrator/Desktop/FREELANCER_COM_WORK/BREXIT analysis/proleave1.txt"
path2="C:/Users/Administrator/Desktop/FREELANCER_COM_WORK/BREXIT analysis/proleave2.txt"
path3="C:/Users/Administrator/Desktop/FREELANCER_COM_WORK/BREXIT analysis/proleave3.txt"
path4="C:/Users/Administrator/Desktop/FREELANCER_COM_WORK/BREXIT analysis/proremain1.txt"
path5="C:/Users/Administrator/Desktop/FREELANCER_COM_WORK/BREXIT analysis/proremain2.txt"
path6="C:/Users/Administrator/Desktop/FREELANCER_COM_WORK/BREXIT analysis/proremain3.txt"
library(data.table)
fwrite(x = my_data,
file = path5,
sep = ",",
col.names=T,
append=T)
# Give the input file name to the function.
result <- fromJSON(file = file6)
# Print the result.
print(result)
# # Convert JSON file to a data frame.
names=result$data$attributes$signatures_by_constituency
#do.call(rbind.data.frame, names)
## Compute maximum length
max.length <- max(sapply(names, length))
## Add NA values to list elements
names1 <- lapply(names, function(v) { c(v, rep(NA, max.length-length(v)))})
## Rbind
my_data=do.call(rbind, names1)
my_data=as.data.frame(my_data)
my_data=my_data[,c("ons_code","signature_count")]
#Write the data into text files
#Initialize the text file path
path1="C:/Users/Administrator/Desktop/FREELANCER_COM_WORK/BREXIT analysis/proleave1.txt"
path2="C:/Users/Administrator/Desktop/FREELANCER_COM_WORK/BREXIT analysis/proleave2.txt"
path3="C:/Users/Administrator/Desktop/FREELANCER_COM_WORK/BREXIT analysis/proleave3.txt"
path4="C:/Users/Administrator/Desktop/FREELANCER_COM_WORK/BREXIT analysis/proremain1.txt"
path5="C:/Users/Administrator/Desktop/FREELANCER_COM_WORK/BREXIT analysis/proremain2.txt"
path6="C:/Users/Administrator/Desktop/FREELANCER_COM_WORK/BREXIT analysis/proremain3.txt"
library(data.table)
fwrite(x = my_data,
file = path6,
sep = ",",
col.names=T,
append=T)
